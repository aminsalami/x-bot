// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: xnode.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XNodeGrpcClient is the client API for XNodeGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XNodeGrpcClient interface {
	AddUser(ctx context.Context, in *AddUserCmd, opts ...grpc.CallOption) (*Response, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetSub(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*SubContent, error)
	GetTrafficUsage(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*TrafficUsage, error)
}

type xNodeGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewXNodeGrpcClient(cc grpc.ClientConnInterface) XNodeGrpcClient {
	return &xNodeGrpcClient{cc}
}

func (c *xNodeGrpcClient) AddUser(ctx context.Context, in *AddUserCmd, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.XNodeGrpc/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xNodeGrpcClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.XNodeGrpc/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xNodeGrpcClient) GetSub(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*SubContent, error) {
	out := new(SubContent)
	err := c.cc.Invoke(ctx, "/pb.XNodeGrpc/GetSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xNodeGrpcClient) GetTrafficUsage(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*TrafficUsage, error) {
	out := new(TrafficUsage)
	err := c.cc.Invoke(ctx, "/pb.XNodeGrpc/GetTrafficUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XNodeGrpcServer is the server API for XNodeGrpc service.
// All implementations must embed UnimplementedXNodeGrpcServer
// for forward compatibility
type XNodeGrpcServer interface {
	AddUser(context.Context, *AddUserCmd) (*Response, error)
	Ping(context.Context, *Empty) (*Empty, error)
	GetSub(context.Context, *UserInfo) (*SubContent, error)
	GetTrafficUsage(context.Context, *UserInfo) (*TrafficUsage, error)
	mustEmbedUnimplementedXNodeGrpcServer()
}

// UnimplementedXNodeGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedXNodeGrpcServer struct {
}

func (UnimplementedXNodeGrpcServer) AddUser(context.Context, *AddUserCmd) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedXNodeGrpcServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedXNodeGrpcServer) GetSub(context.Context, *UserInfo) (*SubContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSub not implemented")
}
func (UnimplementedXNodeGrpcServer) GetTrafficUsage(context.Context, *UserInfo) (*TrafficUsage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrafficUsage not implemented")
}
func (UnimplementedXNodeGrpcServer) mustEmbedUnimplementedXNodeGrpcServer() {}

// UnsafeXNodeGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XNodeGrpcServer will
// result in compilation errors.
type UnsafeXNodeGrpcServer interface {
	mustEmbedUnimplementedXNodeGrpcServer()
}

func RegisterXNodeGrpcServer(s grpc.ServiceRegistrar, srv XNodeGrpcServer) {
	s.RegisterService(&XNodeGrpc_ServiceDesc, srv)
}

func _XNodeGrpc_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XNodeGrpcServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.XNodeGrpc/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XNodeGrpcServer).AddUser(ctx, req.(*AddUserCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _XNodeGrpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XNodeGrpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.XNodeGrpc/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XNodeGrpcServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _XNodeGrpc_GetSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XNodeGrpcServer).GetSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.XNodeGrpc/GetSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XNodeGrpcServer).GetSub(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _XNodeGrpc_GetTrafficUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XNodeGrpcServer).GetTrafficUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.XNodeGrpc/GetTrafficUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XNodeGrpcServer).GetTrafficUsage(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// XNodeGrpc_ServiceDesc is the grpc.ServiceDesc for XNodeGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XNodeGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.XNodeGrpc",
	HandlerType: (*XNodeGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _XNodeGrpc_AddUser_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _XNodeGrpc_Ping_Handler,
		},
		{
			MethodName: "GetSub",
			Handler:    _XNodeGrpc_GetSub_Handler,
		},
		{
			MethodName: "GetTrafficUsage",
			Handler:    _XNodeGrpc_GetTrafficUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xnode.proto",
}
