// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTusers(t *testing.T) {
	t.Parallel()

	query := Tusers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTusersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTusersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tusers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTusersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TuserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTusersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TuserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Tuser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TuserExists to return true, but got false.")
	}
}

func testTusersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tuserFound, err := FindTuser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tuserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTusersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tusers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTusersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tusers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTusersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tuserOne := &Tuser{}
	tuserTwo := &Tuser{}
	if err = randomize.Struct(seed, tuserOne, tuserDBTypes, false, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}
	if err = randomize.Struct(seed, tuserTwo, tuserDBTypes, false, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tuserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tuserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tusers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTusersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tuserOne := &Tuser{}
	tuserTwo := &Tuser{}
	if err = randomize.Struct(seed, tuserOne, tuserDBTypes, false, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}
	if err = randomize.Struct(seed, tuserTwo, tuserDBTypes, false, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tuserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tuserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tuserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func tuserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func tuserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func tuserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func tuserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func tuserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func tuserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func tuserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func tuserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tuser) error {
	*o = Tuser{}
	return nil
}

func testTusersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Tuser{}
	o := &Tuser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tuserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tuser object: %s", err)
	}

	AddTuserHook(boil.BeforeInsertHook, tuserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tuserBeforeInsertHooks = []TuserHook{}

	AddTuserHook(boil.AfterInsertHook, tuserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tuserAfterInsertHooks = []TuserHook{}

	AddTuserHook(boil.AfterSelectHook, tuserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tuserAfterSelectHooks = []TuserHook{}

	AddTuserHook(boil.BeforeUpdateHook, tuserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tuserBeforeUpdateHooks = []TuserHook{}

	AddTuserHook(boil.AfterUpdateHook, tuserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tuserAfterUpdateHooks = []TuserHook{}

	AddTuserHook(boil.BeforeDeleteHook, tuserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tuserBeforeDeleteHooks = []TuserHook{}

	AddTuserHook(boil.AfterDeleteHook, tuserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tuserAfterDeleteHooks = []TuserHook{}

	AddTuserHook(boil.BeforeUpsertHook, tuserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tuserBeforeUpsertHooks = []TuserHook{}

	AddTuserHook(boil.AfterUpsertHook, tuserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tuserAfterUpsertHooks = []TuserHook{}
}

func testTusersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTusersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tuserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTuserToOnePackageUsingPackage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tuser
	var foreign Package

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tuserDBTypes, false, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, packageDBTypes, false, packageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Package struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PackageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Package().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPackageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Package) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TuserSlice{&local}
	if err = local.L.LoadPackage(ctx, tx, false, (*[]*Tuser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Package == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Package = nil
	if err = local.L.LoadPackage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Package == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTuserToOneSetOpPackageUsingPackage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tuser
	var b, c Package

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tuserDBTypes, false, strmangle.SetComplement(tuserPrimaryKeyColumns, tuserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, packageDBTypes, false, strmangle.SetComplement(packagePrimaryKeyColumns, packageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, packageDBTypes, false, strmangle.SetComplement(packagePrimaryKeyColumns, packageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Package{&b, &c} {
		err = a.SetPackage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Package != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tusers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PackageID != x.ID {
			t.Error("foreign key was wrong value", a.PackageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PackageID))
		reflect.Indirect(reflect.ValueOf(&a.PackageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PackageID != x.ID {
			t.Error("foreign key was wrong value", a.PackageID, x.ID)
		}
	}
}

func testTusersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTusersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TuserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTusersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tusers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tuserDBTypes = map[string]string{`ID`: `INTEGER`, `Tid`: `UNSIGNED BIG INT`, `Username`: `TEXT`, `UUID`: `TEXT`, `Active`: `BOOLEAN`, `AddedToNodesCount`: `INT`, `TrafficUsage`: `FLOAT`, `ExpireAt`: `TIME`, `PackageID`: `INTEGER`}
	_            = bytes.MinRead
)

func testTusersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tuserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tuserAllColumns) == len(tuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTusersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tuserAllColumns) == len(tuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tuser{}
	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tuserDBTypes, true, tuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tuserAllColumns, tuserPrimaryKeyColumns) {
		fields = tuserAllColumns
	} else {
		fields = strmangle.SetComplement(
			tuserAllColumns,
			tuserPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, tuserGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TuserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTusersUpsert(t *testing.T) {
	t.Parallel()
	if len(tuserAllColumns) == len(tuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Tuser{}
	if err = randomize.Struct(seed, &o, tuserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tuser: %s", err)
	}

	count, err := Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tuserDBTypes, false, tuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tuser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tuser: %s", err)
	}

	count, err = Tusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
