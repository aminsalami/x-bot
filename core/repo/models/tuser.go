// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tuser is an object representing the database table.
type Tuser struct {
	ID                int64   `boil:"id" json:"id" toml:"id" yaml:"id"`
	Tid               uint64  `boil:"tid" json:"tid" toml:"tid" yaml:"tid"`
	Username          string  `boil:"username" json:"username" toml:"username" yaml:"username"`
	UUID              string  `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	Active            bool    `boil:"active" json:"active" toml:"active" yaml:"active"`
	AddedToNodesCount int64   `boil:"added_to_nodes_count" json:"added_to_nodes_count" toml:"added_to_nodes_count" yaml:"added_to_nodes_count"`
	TrafficUsage      float32 `boil:"traffic_usage" json:"traffic_usage" toml:"traffic_usage" yaml:"traffic_usage"`
	ExpireAt          string  `boil:"expire_at" json:"expire_at" toml:"expire_at" yaml:"expire_at"`
	PackageID         int64   `boil:"package_id" json:"package_id" toml:"package_id" yaml:"package_id"`
	Token             string  `boil:"token" json:"token" toml:"token" yaml:"token"`

	R *tuserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tuserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TuserColumns = struct {
	ID                string
	Tid               string
	Username          string
	UUID              string
	Active            string
	AddedToNodesCount string
	TrafficUsage      string
	ExpireAt          string
	PackageID         string
	Token             string
}{
	ID:                "id",
	Tid:               "tid",
	Username:          "username",
	UUID:              "uuid",
	Active:            "active",
	AddedToNodesCount: "added_to_nodes_count",
	TrafficUsage:      "traffic_usage",
	ExpireAt:          "expire_at",
	PackageID:         "package_id",
	Token:             "token",
}

var TuserTableColumns = struct {
	ID                string
	Tid               string
	Username          string
	UUID              string
	Active            string
	AddedToNodesCount string
	TrafficUsage      string
	ExpireAt          string
	PackageID         string
	Token             string
}{
	ID:                "tuser.id",
	Tid:               "tuser.tid",
	Username:          "tuser.username",
	UUID:              "tuser.uuid",
	Active:            "tuser.active",
	AddedToNodesCount: "tuser.added_to_nodes_count",
	TrafficUsage:      "tuser.traffic_usage",
	ExpireAt:          "tuser.expire_at",
	PackageID:         "tuser.package_id",
	Token:             "tuser.token",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var TuserWhere = struct {
	ID                whereHelperint64
	Tid               whereHelperuint64
	Username          whereHelperstring
	UUID              whereHelperstring
	Active            whereHelperbool
	AddedToNodesCount whereHelperint64
	TrafficUsage      whereHelperfloat32
	ExpireAt          whereHelperstring
	PackageID         whereHelperint64
	Token             whereHelperstring
}{
	ID:                whereHelperint64{field: "\"tuser\".\"id\""},
	Tid:               whereHelperuint64{field: "\"tuser\".\"tid\""},
	Username:          whereHelperstring{field: "\"tuser\".\"username\""},
	UUID:              whereHelperstring{field: "\"tuser\".\"uuid\""},
	Active:            whereHelperbool{field: "\"tuser\".\"active\""},
	AddedToNodesCount: whereHelperint64{field: "\"tuser\".\"added_to_nodes_count\""},
	TrafficUsage:      whereHelperfloat32{field: "\"tuser\".\"traffic_usage\""},
	ExpireAt:          whereHelperstring{field: "\"tuser\".\"expire_at\""},
	PackageID:         whereHelperint64{field: "\"tuser\".\"package_id\""},
	Token:             whereHelperstring{field: "\"tuser\".\"token\""},
}

// TuserRels is where relationship names are stored.
var TuserRels = struct {
	Package string
}{
	Package: "Package",
}

// tuserR is where relationships are stored.
type tuserR struct {
	Package *Package `boil:"Package" json:"Package" toml:"Package" yaml:"Package"`
}

// NewStruct creates a new relationship struct
func (*tuserR) NewStruct() *tuserR {
	return &tuserR{}
}

func (r *tuserR) GetPackage() *Package {
	if r == nil {
		return nil
	}
	return r.Package
}

// tuserL is where Load methods for each relationship are stored.
type tuserL struct{}

var (
	tuserAllColumns            = []string{"id", "tid", "username", "uuid", "active", "added_to_nodes_count", "traffic_usage", "expire_at", "package_id", "token"}
	tuserColumnsWithoutDefault = []string{"tid", "username", "uuid", "expire_at", "package_id", "token"}
	tuserColumnsWithDefault    = []string{"id", "active", "added_to_nodes_count", "traffic_usage"}
	tuserPrimaryKeyColumns     = []string{"id"}
	tuserGeneratedColumns      = []string{"id"}
)

type (
	// TuserSlice is an alias for a slice of pointers to Tuser.
	// This should almost always be used instead of []Tuser.
	TuserSlice []*Tuser
	// TuserHook is the signature for custom Tuser hook methods
	TuserHook func(context.Context, boil.ContextExecutor, *Tuser) error

	tuserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tuserType                 = reflect.TypeOf(&Tuser{})
	tuserMapping              = queries.MakeStructMapping(tuserType)
	tuserPrimaryKeyMapping, _ = queries.BindMapping(tuserType, tuserMapping, tuserPrimaryKeyColumns)
	tuserInsertCacheMut       sync.RWMutex
	tuserInsertCache          = make(map[string]insertCache)
	tuserUpdateCacheMut       sync.RWMutex
	tuserUpdateCache          = make(map[string]updateCache)
	tuserUpsertCacheMut       sync.RWMutex
	tuserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tuserAfterSelectHooks []TuserHook

var tuserBeforeInsertHooks []TuserHook
var tuserAfterInsertHooks []TuserHook

var tuserBeforeUpdateHooks []TuserHook
var tuserAfterUpdateHooks []TuserHook

var tuserBeforeDeleteHooks []TuserHook
var tuserAfterDeleteHooks []TuserHook

var tuserBeforeUpsertHooks []TuserHook
var tuserAfterUpsertHooks []TuserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tuser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tuser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tuser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tuser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tuser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tuser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tuser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tuser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tuser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tuserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTuserHook registers your hook function for all future operations.
func AddTuserHook(hookPoint boil.HookPoint, tuserHook TuserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tuserAfterSelectHooks = append(tuserAfterSelectHooks, tuserHook)
	case boil.BeforeInsertHook:
		tuserBeforeInsertHooks = append(tuserBeforeInsertHooks, tuserHook)
	case boil.AfterInsertHook:
		tuserAfterInsertHooks = append(tuserAfterInsertHooks, tuserHook)
	case boil.BeforeUpdateHook:
		tuserBeforeUpdateHooks = append(tuserBeforeUpdateHooks, tuserHook)
	case boil.AfterUpdateHook:
		tuserAfterUpdateHooks = append(tuserAfterUpdateHooks, tuserHook)
	case boil.BeforeDeleteHook:
		tuserBeforeDeleteHooks = append(tuserBeforeDeleteHooks, tuserHook)
	case boil.AfterDeleteHook:
		tuserAfterDeleteHooks = append(tuserAfterDeleteHooks, tuserHook)
	case boil.BeforeUpsertHook:
		tuserBeforeUpsertHooks = append(tuserBeforeUpsertHooks, tuserHook)
	case boil.AfterUpsertHook:
		tuserAfterUpsertHooks = append(tuserAfterUpsertHooks, tuserHook)
	}
}

// One returns a single tuser record from the query.
func (q tuserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tuser, error) {
	o := &Tuser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tuser")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tuser records from the query.
func (q tuserQuery) All(ctx context.Context, exec boil.ContextExecutor) (TuserSlice, error) {
	var o []*Tuser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tuser slice")
	}

	if len(tuserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tuser records in the query.
func (q tuserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tuser rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tuserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tuser exists")
	}

	return count > 0, nil
}

// Package pointed to by the foreign key.
func (o *Tuser) Package(mods ...qm.QueryMod) packageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PackageID),
	}

	queryMods = append(queryMods, mods...)

	return Packages(queryMods...)
}

// LoadPackage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tuserL) LoadPackage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTuser interface{}, mods queries.Applicator) error {
	var slice []*Tuser
	var object *Tuser

	if singular {
		var ok bool
		object, ok = maybeTuser.(*Tuser)
		if !ok {
			object = new(Tuser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTuser))
			}
		}
	} else {
		s, ok := maybeTuser.(*[]*Tuser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTuser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTuser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tuserR{}
		}
		args = append(args, object.PackageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tuserR{}
			}

			for _, a := range args {
				if a == obj.PackageID {
					continue Outer
				}
			}

			args = append(args, obj.PackageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`package`),
		qm.WhereIn(`package.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Package")
	}

	var resultSlice []*Package
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Package")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for package")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for package")
	}

	if len(packageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Package = foreign
		if foreign.R == nil {
			foreign.R = &packageR{}
		}
		foreign.R.Tusers = append(foreign.R.Tusers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PackageID == foreign.ID {
				local.R.Package = foreign
				if foreign.R == nil {
					foreign.R = &packageR{}
				}
				foreign.R.Tusers = append(foreign.R.Tusers, local)
				break
			}
		}
	}

	return nil
}

// SetPackage of the tuser to the related item.
// Sets o.R.Package to related.
// Adds o to related.R.Tusers.
func (o *Tuser) SetPackage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Package) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tuser\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"package_id"}),
		strmangle.WhereClause("\"", "\"", 0, tuserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PackageID = related.ID
	if o.R == nil {
		o.R = &tuserR{
			Package: related,
		}
	} else {
		o.R.Package = related
	}

	if related.R == nil {
		related.R = &packageR{
			Tusers: TuserSlice{o},
		}
	} else {
		related.R.Tusers = append(related.R.Tusers, o)
	}

	return nil
}

// Tusers retrieves all the records using an executor.
func Tusers(mods ...qm.QueryMod) tuserQuery {
	mods = append(mods, qm.From("\"tuser\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tuser\".*"})
	}

	return tuserQuery{q}
}

// FindTuser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTuser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Tuser, error) {
	tuserObj := &Tuser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tuser\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tuserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tuser")
	}

	if err = tuserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tuserObj, err
	}

	return tuserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tuser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tuser provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tuserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tuserInsertCacheMut.RLock()
	cache, cached := tuserInsertCache[key]
	tuserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tuserAllColumns,
			tuserColumnsWithDefault,
			tuserColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, tuserGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(tuserType, tuserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tuserType, tuserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tuser\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tuser\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tuser")
	}

	if !cached {
		tuserInsertCacheMut.Lock()
		tuserInsertCache[key] = cache
		tuserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tuser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tuser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tuserUpdateCacheMut.RLock()
	cache, cached := tuserUpdateCache[key]
	tuserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tuserAllColumns,
			tuserPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, tuserGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tuser, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tuser\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, tuserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tuserType, tuserMapping, append(wl, tuserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tuser row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tuser")
	}

	if !cached {
		tuserUpdateCacheMut.Lock()
		tuserUpdateCache[key] = cache
		tuserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tuserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tuser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tuser")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TuserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tuserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tuser\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tuserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tuser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tuser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tuser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tuser provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tuserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tuserUpsertCacheMut.RLock()
	cache, cached := tuserUpsertCache[key]
	tuserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tuserAllColumns,
			tuserColumnsWithDefault,
			tuserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tuserAllColumns,
			tuserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tuser, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tuserPrimaryKeyColumns))
			copy(conflict, tuserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"tuser\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tuserType, tuserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tuserType, tuserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tuser")
	}

	if !cached {
		tuserUpsertCacheMut.Lock()
		tuserUpsertCache[key] = cache
		tuserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tuser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tuser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tuser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tuserPrimaryKeyMapping)
	sql := "DELETE FROM \"tuser\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tuser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tuser")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tuserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tuserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tuser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tuser")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TuserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tuserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tuserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tuser\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tuserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tuser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tuser")
	}

	if len(tuserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tuser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTuser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TuserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TuserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tuserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tuser\".* FROM \"tuser\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tuserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TuserSlice")
	}

	*o = slice

	return nil
}

// TuserExists checks if the Tuser row exists.
func TuserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tuser\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tuser exists")
	}

	return exists, nil
}

// Exists checks if the Tuser row exists.
func (o *Tuser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TuserExists(ctx, exec, o.ID)
}
