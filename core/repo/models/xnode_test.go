// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testXnodes(t *testing.T) {
	t.Parallel()

	query := Xnodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testXnodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testXnodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Xnodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testXnodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := XnodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testXnodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := XnodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Xnode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected XnodeExists to return true, but got false.")
	}
}

func testXnodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	xnodeFound, err := FindXnode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if xnodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testXnodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Xnodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testXnodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Xnodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testXnodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	xnodeOne := &Xnode{}
	xnodeTwo := &Xnode{}
	if err = randomize.Struct(seed, xnodeOne, xnodeDBTypes, false, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}
	if err = randomize.Struct(seed, xnodeTwo, xnodeDBTypes, false, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = xnodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = xnodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Xnodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testXnodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	xnodeOne := &Xnode{}
	xnodeTwo := &Xnode{}
	if err = randomize.Struct(seed, xnodeOne, xnodeDBTypes, false, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}
	if err = randomize.Struct(seed, xnodeTwo, xnodeDBTypes, false, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = xnodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = xnodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func xnodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func xnodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func xnodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func xnodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func xnodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func xnodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func xnodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func xnodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func xnodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Xnode) error {
	*o = Xnode{}
	return nil
}

func testXnodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Xnode{}
	o := &Xnode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, xnodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Xnode object: %s", err)
	}

	AddXnodeHook(boil.BeforeInsertHook, xnodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	xnodeBeforeInsertHooks = []XnodeHook{}

	AddXnodeHook(boil.AfterInsertHook, xnodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	xnodeAfterInsertHooks = []XnodeHook{}

	AddXnodeHook(boil.AfterSelectHook, xnodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	xnodeAfterSelectHooks = []XnodeHook{}

	AddXnodeHook(boil.BeforeUpdateHook, xnodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	xnodeBeforeUpdateHooks = []XnodeHook{}

	AddXnodeHook(boil.AfterUpdateHook, xnodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	xnodeAfterUpdateHooks = []XnodeHook{}

	AddXnodeHook(boil.BeforeDeleteHook, xnodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	xnodeBeforeDeleteHooks = []XnodeHook{}

	AddXnodeHook(boil.AfterDeleteHook, xnodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	xnodeAfterDeleteHooks = []XnodeHook{}

	AddXnodeHook(boil.BeforeUpsertHook, xnodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	xnodeBeforeUpsertHooks = []XnodeHook{}

	AddXnodeHook(boil.AfterUpsertHook, xnodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	xnodeAfterUpsertHooks = []XnodeHook{}
}

func testXnodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testXnodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(xnodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testXnodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testXnodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := XnodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testXnodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Xnodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	xnodeDBTypes = map[string]string{`ID`: `INTEGER`, `Address`: `TEXT`, `PanelType`: `TEXT`, `Active`: `BOOLEAN`}
	_            = bytes.MinRead
)

func testXnodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(xnodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(xnodeAllColumns) == len(xnodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testXnodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(xnodeAllColumns) == len(xnodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Xnode{}
	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, xnodeDBTypes, true, xnodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(xnodeAllColumns, xnodePrimaryKeyColumns) {
		fields = xnodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			xnodeAllColumns,
			xnodePrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, xnodeGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := XnodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testXnodesUpsert(t *testing.T) {
	t.Parallel()
	if len(xnodeAllColumns) == len(xnodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Xnode{}
	if err = randomize.Struct(seed, &o, xnodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Xnode: %s", err)
	}

	count, err := Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, xnodeDBTypes, false, xnodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Xnode struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Xnode: %s", err)
	}

	count, err = Xnodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
