// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Purchase is an object representing the database table.
type Purchase struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TuserID     int64     `boil:"tuser_id" json:"tuser_id" toml:"tuser_id" yaml:"tuser_id"`
	PackageID   int64     `boil:"package_id" json:"package_id" toml:"package_id" yaml:"package_id"`
	Price       int64     `boil:"price" json:"price" toml:"price" yaml:"price"`
	PackageName string    `boil:"package_name" json:"package_name" toml:"package_name" yaml:"package_name"`
	Status      int64     `boil:"status" json:"status" toml:"status" yaml:"status"`
	ProcessedAt null.Time `boil:"processed_at" json:"processed_at,omitempty" toml:"processed_at" yaml:"processed_at,omitempty"`
	MSGID       int64     `boil:"msg_id" json:"msg_id" toml:"msg_id" yaml:"msg_id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *purchaseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L purchaseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PurchaseColumns = struct {
	ID          string
	TuserID     string
	PackageID   string
	Price       string
	PackageName string
	Status      string
	ProcessedAt string
	MSGID       string
	CreatedAt   string
}{
	ID:          "id",
	TuserID:     "tuser_id",
	PackageID:   "package_id",
	Price:       "price",
	PackageName: "package_name",
	Status:      "status",
	ProcessedAt: "processed_at",
	MSGID:       "msg_id",
	CreatedAt:   "created_at",
}

var PurchaseTableColumns = struct {
	ID          string
	TuserID     string
	PackageID   string
	Price       string
	PackageName string
	Status      string
	ProcessedAt string
	MSGID       string
	CreatedAt   string
}{
	ID:          "purchase.id",
	TuserID:     "purchase.tuser_id",
	PackageID:   "purchase.package_id",
	Price:       "purchase.price",
	PackageName: "purchase.package_name",
	Status:      "purchase.status",
	ProcessedAt: "purchase.processed_at",
	MSGID:       "purchase.msg_id",
	CreatedAt:   "purchase.created_at",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PurchaseWhere = struct {
	ID          whereHelperint64
	TuserID     whereHelperint64
	PackageID   whereHelperint64
	Price       whereHelperint64
	PackageName whereHelperstring
	Status      whereHelperint64
	ProcessedAt whereHelpernull_Time
	MSGID       whereHelperint64
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"purchase\".\"id\""},
	TuserID:     whereHelperint64{field: "\"purchase\".\"tuser_id\""},
	PackageID:   whereHelperint64{field: "\"purchase\".\"package_id\""},
	Price:       whereHelperint64{field: "\"purchase\".\"price\""},
	PackageName: whereHelperstring{field: "\"purchase\".\"package_name\""},
	Status:      whereHelperint64{field: "\"purchase\".\"status\""},
	ProcessedAt: whereHelpernull_Time{field: "\"purchase\".\"processed_at\""},
	MSGID:       whereHelperint64{field: "\"purchase\".\"msg_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"purchase\".\"created_at\""},
}

// PurchaseRels is where relationship names are stored.
var PurchaseRels = struct {
	Package string
	Tuser   string
}{
	Package: "Package",
	Tuser:   "Tuser",
}

// purchaseR is where relationships are stored.
type purchaseR struct {
	Package *Package `boil:"Package" json:"Package" toml:"Package" yaml:"Package"`
	Tuser   *Tuser   `boil:"Tuser" json:"Tuser" toml:"Tuser" yaml:"Tuser"`
}

// NewStruct creates a new relationship struct
func (*purchaseR) NewStruct() *purchaseR {
	return &purchaseR{}
}

func (r *purchaseR) GetPackage() *Package {
	if r == nil {
		return nil
	}
	return r.Package
}

func (r *purchaseR) GetTuser() *Tuser {
	if r == nil {
		return nil
	}
	return r.Tuser
}

// purchaseL is where Load methods for each relationship are stored.
type purchaseL struct{}

var (
	purchaseAllColumns            = []string{"id", "tuser_id", "package_id", "price", "package_name", "status", "processed_at", "msg_id", "created_at"}
	purchaseColumnsWithoutDefault = []string{"tuser_id", "package_id", "price", "package_name", "status", "msg_id", "created_at"}
	purchaseColumnsWithDefault    = []string{"id", "processed_at"}
	purchasePrimaryKeyColumns     = []string{"id"}
	purchaseGeneratedColumns      = []string{"id"}
)

type (
	// PurchaseSlice is an alias for a slice of pointers to Purchase.
	// This should almost always be used instead of []Purchase.
	PurchaseSlice []*Purchase
	// PurchaseHook is the signature for custom Purchase hook methods
	PurchaseHook func(context.Context, boil.ContextExecutor, *Purchase) error

	purchaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	purchaseType                 = reflect.TypeOf(&Purchase{})
	purchaseMapping              = queries.MakeStructMapping(purchaseType)
	purchasePrimaryKeyMapping, _ = queries.BindMapping(purchaseType, purchaseMapping, purchasePrimaryKeyColumns)
	purchaseInsertCacheMut       sync.RWMutex
	purchaseInsertCache          = make(map[string]insertCache)
	purchaseUpdateCacheMut       sync.RWMutex
	purchaseUpdateCache          = make(map[string]updateCache)
	purchaseUpsertCacheMut       sync.RWMutex
	purchaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var purchaseAfterSelectHooks []PurchaseHook

var purchaseBeforeInsertHooks []PurchaseHook
var purchaseAfterInsertHooks []PurchaseHook

var purchaseBeforeUpdateHooks []PurchaseHook
var purchaseAfterUpdateHooks []PurchaseHook

var purchaseBeforeDeleteHooks []PurchaseHook
var purchaseAfterDeleteHooks []PurchaseHook

var purchaseBeforeUpsertHooks []PurchaseHook
var purchaseAfterUpsertHooks []PurchaseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Purchase) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Purchase) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Purchase) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Purchase) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Purchase) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Purchase) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Purchase) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Purchase) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Purchase) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range purchaseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPurchaseHook registers your hook function for all future operations.
func AddPurchaseHook(hookPoint boil.HookPoint, purchaseHook PurchaseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		purchaseAfterSelectHooks = append(purchaseAfterSelectHooks, purchaseHook)
	case boil.BeforeInsertHook:
		purchaseBeforeInsertHooks = append(purchaseBeforeInsertHooks, purchaseHook)
	case boil.AfterInsertHook:
		purchaseAfterInsertHooks = append(purchaseAfterInsertHooks, purchaseHook)
	case boil.BeforeUpdateHook:
		purchaseBeforeUpdateHooks = append(purchaseBeforeUpdateHooks, purchaseHook)
	case boil.AfterUpdateHook:
		purchaseAfterUpdateHooks = append(purchaseAfterUpdateHooks, purchaseHook)
	case boil.BeforeDeleteHook:
		purchaseBeforeDeleteHooks = append(purchaseBeforeDeleteHooks, purchaseHook)
	case boil.AfterDeleteHook:
		purchaseAfterDeleteHooks = append(purchaseAfterDeleteHooks, purchaseHook)
	case boil.BeforeUpsertHook:
		purchaseBeforeUpsertHooks = append(purchaseBeforeUpsertHooks, purchaseHook)
	case boil.AfterUpsertHook:
		purchaseAfterUpsertHooks = append(purchaseAfterUpsertHooks, purchaseHook)
	}
}

// One returns a single purchase record from the query.
func (q purchaseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Purchase, error) {
	o := &Purchase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for purchase")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Purchase records from the query.
func (q purchaseQuery) All(ctx context.Context, exec boil.ContextExecutor) (PurchaseSlice, error) {
	var o []*Purchase

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Purchase slice")
	}

	if len(purchaseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Purchase records in the query.
func (q purchaseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count purchase rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q purchaseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if purchase exists")
	}

	return count > 0, nil
}

// Package pointed to by the foreign key.
func (o *Purchase) Package(mods ...qm.QueryMod) packageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PackageID),
	}

	queryMods = append(queryMods, mods...)

	return Packages(queryMods...)
}

// Tuser pointed to by the foreign key.
func (o *Purchase) Tuser(mods ...qm.QueryMod) tuserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TuserID),
	}

	queryMods = append(queryMods, mods...)

	return Tusers(queryMods...)
}

// LoadPackage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (purchaseL) LoadPackage(ctx context.Context, e boil.ContextExecutor, singular bool, maybePurchase interface{}, mods queries.Applicator) error {
	var slice []*Purchase
	var object *Purchase

	if singular {
		var ok bool
		object, ok = maybePurchase.(*Purchase)
		if !ok {
			object = new(Purchase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePurchase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePurchase))
			}
		}
	} else {
		s, ok := maybePurchase.(*[]*Purchase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePurchase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePurchase))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &purchaseR{}
		}
		args = append(args, object.PackageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchaseR{}
			}

			for _, a := range args {
				if a == obj.PackageID {
					continue Outer
				}
			}

			args = append(args, obj.PackageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`package`),
		qm.WhereIn(`package.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Package")
	}

	var resultSlice []*Package
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Package")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for package")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for package")
	}

	if len(packageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Package = foreign
		if foreign.R == nil {
			foreign.R = &packageR{}
		}
		foreign.R.Purchases = append(foreign.R.Purchases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PackageID == foreign.ID {
				local.R.Package = foreign
				if foreign.R == nil {
					foreign.R = &packageR{}
				}
				foreign.R.Purchases = append(foreign.R.Purchases, local)
				break
			}
		}
	}

	return nil
}

// LoadTuser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (purchaseL) LoadTuser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePurchase interface{}, mods queries.Applicator) error {
	var slice []*Purchase
	var object *Purchase

	if singular {
		var ok bool
		object, ok = maybePurchase.(*Purchase)
		if !ok {
			object = new(Purchase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePurchase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePurchase))
			}
		}
	} else {
		s, ok := maybePurchase.(*[]*Purchase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePurchase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePurchase))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &purchaseR{}
		}
		args = append(args, object.TuserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &purchaseR{}
			}

			for _, a := range args {
				if a == obj.TuserID {
					continue Outer
				}
			}

			args = append(args, obj.TuserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tuser`),
		qm.WhereIn(`tuser.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tuser")
	}

	var resultSlice []*Tuser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tuser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tuser")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tuser")
	}

	if len(tuserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tuser = foreign
		if foreign.R == nil {
			foreign.R = &tuserR{}
		}
		foreign.R.Purchases = append(foreign.R.Purchases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TuserID == foreign.ID {
				local.R.Tuser = foreign
				if foreign.R == nil {
					foreign.R = &tuserR{}
				}
				foreign.R.Purchases = append(foreign.R.Purchases, local)
				break
			}
		}
	}

	return nil
}

// SetPackage of the purchase to the related item.
// Sets o.R.Package to related.
// Adds o to related.R.Purchases.
func (o *Purchase) SetPackage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Package) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchase\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"package_id"}),
		strmangle.WhereClause("\"", "\"", 0, purchasePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PackageID = related.ID
	if o.R == nil {
		o.R = &purchaseR{
			Package: related,
		}
	} else {
		o.R.Package = related
	}

	if related.R == nil {
		related.R = &packageR{
			Purchases: PurchaseSlice{o},
		}
	} else {
		related.R.Purchases = append(related.R.Purchases, o)
	}

	return nil
}

// SetTuser of the purchase to the related item.
// Sets o.R.Tuser to related.
// Adds o to related.R.Purchases.
func (o *Purchase) SetTuser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tuser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"purchase\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"tuser_id"}),
		strmangle.WhereClause("\"", "\"", 0, purchasePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TuserID = related.ID
	if o.R == nil {
		o.R = &purchaseR{
			Tuser: related,
		}
	} else {
		o.R.Tuser = related
	}

	if related.R == nil {
		related.R = &tuserR{
			Purchases: PurchaseSlice{o},
		}
	} else {
		related.R.Purchases = append(related.R.Purchases, o)
	}

	return nil
}

// Purchases retrieves all the records using an executor.
func Purchases(mods ...qm.QueryMod) purchaseQuery {
	mods = append(mods, qm.From("\"purchase\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"purchase\".*"})
	}

	return purchaseQuery{q}
}

// FindPurchase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPurchase(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Purchase, error) {
	purchaseObj := &Purchase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"purchase\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, purchaseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from purchase")
	}

	if err = purchaseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return purchaseObj, err
	}

	return purchaseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Purchase) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no purchase provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	purchaseInsertCacheMut.RLock()
	cache, cached := purchaseInsertCache[key]
	purchaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			purchaseAllColumns,
			purchaseColumnsWithDefault,
			purchaseColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, purchaseGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(purchaseType, purchaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(purchaseType, purchaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"purchase\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"purchase\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into purchase")
	}

	if !cached {
		purchaseInsertCacheMut.Lock()
		purchaseInsertCache[key] = cache
		purchaseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Purchase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Purchase) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	purchaseUpdateCacheMut.RLock()
	cache, cached := purchaseUpdateCache[key]
	purchaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			purchaseAllColumns,
			purchasePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, purchaseGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update purchase, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"purchase\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, purchasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(purchaseType, purchaseMapping, append(wl, purchasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update purchase row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for purchase")
	}

	if !cached {
		purchaseUpdateCacheMut.Lock()
		purchaseUpdateCache[key] = cache
		purchaseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q purchaseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for purchase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for purchase")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PurchaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"purchase\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, purchasePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in purchase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all purchase")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Purchase) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no purchase provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(purchaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	purchaseUpsertCacheMut.RLock()
	cache, cached := purchaseUpsertCache[key]
	purchaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			purchaseAllColumns,
			purchaseColumnsWithDefault,
			purchaseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			purchaseAllColumns,
			purchasePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert purchase, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(purchasePrimaryKeyColumns))
			copy(conflict, purchasePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"purchase\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(purchaseType, purchaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(purchaseType, purchaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert purchase")
	}

	if !cached {
		purchaseUpsertCacheMut.Lock()
		purchaseUpsertCache[key] = cache
		purchaseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Purchase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Purchase) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Purchase provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), purchasePrimaryKeyMapping)
	sql := "DELETE FROM \"purchase\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from purchase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for purchase")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q purchaseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no purchaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from purchase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for purchase")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PurchaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(purchaseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"purchase\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, purchasePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from purchase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for purchase")
	}

	if len(purchaseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Purchase) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPurchase(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PurchaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PurchaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), purchasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"purchase\".* FROM \"purchase\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, purchasePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PurchaseSlice")
	}

	*o = slice

	return nil
}

// PurchaseExists checks if the Purchase row exists.
func PurchaseExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"purchase\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if purchase exists")
	}

	return exists, nil
}

// Exists checks if the Purchase row exists.
func (o *Purchase) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PurchaseExists(ctx, exec, o.ID)
}
